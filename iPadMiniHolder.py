#!/usr/bin/env python3
# Set to True to enable dev mode, this removes the screw threads that overload OpenSCAD
DEV_MODE = True

# Total width of the cover - to allow max space for the charging connector on the right
# for an even spacing all around, use the following line to calculate the correct width
# This sizing is selected to fit my 3D printer
TOTAL_W = 218
# TOTAL_W = IPAD_W + WALL * 2 + SLIP * 2 + INNER_WALL * 2 + WALL_PADDING * 2

# If True, the outer cover will have a cutout for the power connector
POWER_CONNECTOR_ACCESSIBLE = False

# If True, will allow the iPad to be slid out the top (and give access to the volume controls)
ALLOW_IPAD_SLIDE_IN = False

# For dev only
SHOW_IPAD = False

# Size of the actual iPad. This is for an iPad Mini 1 (original)
# Assuming the corners are the same, this will likely work if the dimensions are
# updated for any iPad Mini
# Note this is done with the iPad in a horizontal orentation, looking at the screen
IPAD_H = 134.7
IPAD_W = 200
IPAD_D = 7.2

SCREEN_W = 160
SCREEN_H = 120

import os
from solid import (
    cube,
    use,
    scad_render_to_file,
    translate,
    rotate,
    cylinder,
    import_stl,
    scale,
)
from solid.objects import difference, hull, linear_extrude, polygon, union

use("threads.scad")

WALL = 1
INNER_WALL = 2
BACK = 1.6
SLIP = 1  # Space around the edges to allow the iPad to slide in
WALL_PADDING = 0.4


BUTTON_TO_EDGE = 3.7
SCREEN_BORDER = 3
BUTTON_D = 14  # Oversize to also cover the camera and light sensor

START_X = -100.000162
START_Y = -67.209085

POWER_CONNECTOR_LEN = 7
POWER_UNDERHANG = 20
LOCK_BUTTON_LEN = 12
LOCK_BUTTON_TO_EDGE = 9


BASE_IPAD = translate([0, IPAD_H, 0])(
    rotate([0, 0, -90])(scale([25.4, 25.4, 25.4])(import_stl("iPadMini.STL")))
).set_modifier("#")
SCREEN_BOTTOM_EDGE = (IPAD_H - SCREEN_H) / 2
SCREEN_SIDE_EDGE = (IPAD_W - SCREEN_W) / 2
BASE_IPAD -= translate([SCREEN_SIDE_EDGE, SCREEN_BOTTOM_EDGE, IPAD_D - 0.1])(
    cube([SCREEN_W, SCREEN_H, 0.2]).set_modifier("%")
)
IPAD_STL = translate([IPAD_W, IPAD_H, 0])(rotate([0, 0, 180])(BASE_IPAD))


def screwthread():
    """Returns a screw thread"""
    if DEV_MODE:
        return cylinder(d=6, h=15).set_modifier("#")
    else:
        return metric_thread(diameter=6, length=15)


def scaledipad(x, y, height):
    """Returns an instance of the iPad scaled to have x, y mm extra size, at height"""
    xscale = (IPAD_W + x) / IPAD_W
    yscale = (IPAD_H + y) / IPAD_H
    print(xscale, yscale)
    o = linear_extrude(height)(polygon(IPAD_POINTS))
    return scale([xscale, yscale, 1])(o)


def ipadcorner(height=7.2):
    """Returns a 15x15mm corner of the ipad at mm height"""
    o = linear_extrude(height)(polygon(IPAD_CORNER))
    return o


def sizedipad(x, y, height):
    """Returns an iPad x,y size, with fixed size corners"""
    o = hull()(
        (ipadcorner(height)),
        translate([0, y, 0])(rotate([0, 0, -90])((ipadcorner(height)))),
        translate([x, y, 0])(rotate([0, 0, 180])((ipadcorner(height)))),
        translate([x, 0, 0])(rotate([0, 0, 90])((ipadcorner(height)))),
        translate([15, 15, 0])(cube([x - 30, y - 30, height])),
    )
    return o


def screws():
    """The screw holes that need to be applied to both halves"""
    threads = []
    for x in [0, IPAD_W + WALL * 1 + SLIP * 2 + INNER_WALL * 1 + WALL_PADDING]:
        for y in [30, IPAD_H + WALL * 2 + SLIP * 2 + INNER_WALL + WALL_PADDING - 30]:
            threads.append(
                translate([x, y, BACK + IPAD_D / 2])(rotate([0, 90, 0])(screwthread()))
            )
    return union()(*threads)


def ipadminiholderfront():
    # Back (wall mount)
    # o = sizedipad(IPAD_W + WALL * 2 + SLIP * 2, IPAD_H + WALL * 2 + SLIP * 2, BACK)
    o = union()
    # Front supports
    o += sizedipad(
        TOTAL_W,
        IPAD_H + WALL * 2 + SLIP * 2 + INNER_WALL + WALL_PADDING,
        IPAD_D + WALL + SLIP + BACK,
    )

    sides = WALL + INNER_WALL + WALL_PADDING + SLIP

    # Cutouts for buttons, round curves around the button
    o -= translate(
        [
            IPAD_W
            + WALL
            + SLIP * 2
            + INNER_WALL
            + WALL_PADDING
            - BUTTON_D / 2
            - BUTTON_TO_EDGE,
            (IPAD_H + WALL * 2 + SLIP * 2) / 2 + INNER_WALL + WALL_PADDING,
            BACK,
        ]
    )(cylinder(d=BUTTON_D, h=50))
    o -= translate(
        [
            sides
            + SCREEN_SIDE_EDGE
            - SCREEN_BORDER
            + IPAD_W
            - (SCREEN_SIDE_EDGE - SCREEN_BORDER) * 2
            + BUTTON_D / 2,
            (IPAD_H + WALL * 2 + SLIP * 2) / 2 + INNER_WALL + WALL_PADDING + BUTTON_D,
            BACK,
        ]
    )(
        difference()(
            translate([-BUTTON_D, -BUTTON_D, 0])(cube([BUTTON_D, BUTTON_D, 50])),
            cylinder(d=BUTTON_D, h=50),
        )
    )
    o -= translate(
        [
            sides
            + SCREEN_SIDE_EDGE
            - SCREEN_BORDER
            + IPAD_W
            - (SCREEN_SIDE_EDGE - SCREEN_BORDER) * 2
            + BUTTON_D / 2,
            (IPAD_H + WALL * 2 + SLIP * 2) / 2 + INNER_WALL + WALL_PADDING - BUTTON_D,
            BACK,
        ]
    )(
        difference()(
            translate([-BUTTON_D, 0, 0])(cube([BUTTON_D, BUTTON_D, 50])),
            cylinder(d=BUTTON_D, h=50),
        )
    )
    # Camera
    o -= translate(
        [
            sides + BUTTON_TO_EDGE + BUTTON_D / 2,
            (IPAD_H + WALL * 2 + SLIP * 2) / 2 + INNER_WALL + WALL_PADDING,
            BACK,
        ]
    )(cylinder(d=BUTTON_D, h=50))
    o -= translate(
        [
            sides + SCREEN_SIDE_EDGE - SCREEN_BORDER - BUTTON_D / 2,
            (IPAD_H + WALL * 2 + SLIP * 2) / 2 + INNER_WALL + WALL_PADDING + BUTTON_D,
            BACK,
        ]
    )(
        difference()(
            translate([0, -BUTTON_D, 0])(cube([BUTTON_D, BUTTON_D, 50])),
            cylinder(d=BUTTON_D, h=50),
        )
    )
    o -= translate(
        [
            sides + SCREEN_SIDE_EDGE - SCREEN_BORDER - BUTTON_D / 2,
            (IPAD_H + WALL * 2 + SLIP * 2) / 2 + INNER_WALL + WALL_PADDING - BUTTON_D,
            BACK,
        ]
    )(
        difference()(
            translate([0, 0, 0])(cube([BUTTON_D, BUTTON_D, 50])),
            cylinder(d=BUTTON_D, h=50),
        )
    )

    # # Camera
    # o -= translate([WALL + SIDE_EDGE / 2, (IPAD_H + WALL * 2 + SLIP * 2) / 2, BACK])(
    #     cylinder(d=BUTTON_D, h=50)
    # )

    # Cutout for actual iPad, made very tall to allow sliding in/out
    if ALLOW_IPAD_SLIDE_IN:
        height = IPAD_H * 2 + INNER_WALL + WALL_PADDING
    else:
        height = IPAD_H + INNER_WALL * 2 + WALL_PADDING
    o -= translate([WALL, WALL, -1])(
        sizedipad(
            IPAD_W + SLIP * 2 + INNER_WALL * 2 + WALL_PADDING * 2,
            height,
            IPAD_D + SLIP + BACK + 1,
        )
    )
    # Cutout for remaining material around where the extra overhang is for the power
    # connector
    o -= translate([WALL, WALL, -1])(
        sizedipad(
            TOTAL_W - WALL * 2,
            IPAD_H + INNER_WALL * 2 + WALL_PADDING,
            IPAD_D + SLIP + BACK + 1,
        )
    )
    # Cutout for screen
    o -= translate(
        [
            sides + SCREEN_SIDE_EDGE - SCREEN_BORDER,
            sides + SCREEN_BOTTOM_EDGE - SCREEN_BORDER,
            BACK,
        ]
    )(
        cube(
            [
                IPAD_W - (SCREEN_SIDE_EDGE - SCREEN_BORDER) * 2,
                IPAD_H - (SCREEN_BOTTOM_EDGE - SCREEN_BORDER) * 2,
                IPAD_D * 3,
            ]
        )
    )
    # Side "hooks"
    o += translate([WALL, (IPAD_H - 15 * 2) + 15, 0])(
        rotate([90, 0, 0])(
            linear_extrude(IPAD_H - 15 * 2)(polygon([[0, 0], [1, 0], [0, 1]]))
        )
    )
    o += translate([TOTAL_W - WALL * 2 + WALL, 15, 0])(
        rotate([-90, 180, 0])(
            linear_extrude(IPAD_H - 15 * 2)(polygon([[0, 0], [1, 0], [0, 1]]))
        )
    )
    o += translate([(TOTAL_W - 15 * 2) + 15, WALL, 0])(
        rotate([0, -90, 0])(
            linear_extrude(TOTAL_W - 15 * 2)(polygon([[0, 0], [1, 0], [0, 1]]))
        )
    )
    # o += translate([15, WALL, 0])(cube([IPAD_W - 15 * 2, WALL, WALL]))

    # Power connector
    if POWER_CONNECTOR_ACCESSIBLE:
        o -= translate(
            [
                IPAD_W / 2,
                (IPAD_H + WALL * 2 + SLIP * 2) / 2
                + INNER_WALL
                + WALL_PADDING
                - POWER_UNDERHANG
                - BUTTON_D / 2,
                -1,
            ]
        )(cube([IPAD_W, BUTTON_D + POWER_UNDERHANG, IPAD_D + SLIP + BACK + 1]))

    # Lock Button
    if ALLOW_IPAD_SLIDE_IN:
        extra = 100
    else:
        extra = 0
    o -= translate(
        [
            -1,
            (IPAD_H + WALL * 2 + SLIP * 2)
            - LOCK_BUTTON_TO_EDGE
            - LOCK_BUTTON_LEN
            + INNER_WALL
            + WALL_PADDING,
            0,
        ]
    )(cube([50, LOCK_BUTTON_LEN + extra, IPAD_D + SLIP + BACK]))

    # Screws
    o -= screws()

    if SHOW_IPAD:
        o += translate(
            [
                WALL + INNER_WALL + SLIP + WALL_PADDING,
                WALL + INNER_WALL + SLIP + WALL_PADDING,
                BACK,
            ]
        )(IPAD_STL).set_modifier("")

    return o


def ipadminiholderback():
    # Back (wall mount)
    if ALLOW_IPAD_SLIDE_IN:
        height = IPAD_H + WALL * 2 + SLIP * 2
    else:
        height = IPAD_H + WALL * 1 + SLIP * 1
    o = translate([WALL * 2 + WALL_PADDING, WALL * 2 + WALL_PADDING, 0])(
        sizedipad(TOTAL_W - INNER_WALL * 2 - WALL_PADDING * 2, height, BACK)
    )
    # Front supports
    o += translate([WALL + WALL_PADDING, WALL + WALL_PADDING, BACK])(
        sizedipad(
            IPAD_W + SLIP * 2 + INNER_WALL * 2, IPAD_H + SLIP * 2 + INNER_WALL, IPAD_D
        )
    )
    # Cutout for actual iPad, made very tall to allow sliding in/out
    o -= translate(
        [WALL + INNER_WALL + WALL_PADDING, WALL + INNER_WALL + WALL_PADDING, BACK]
    )(sizedipad(IPAD_W + SLIP * 2, IPAD_H * 2, IPAD_D + SLIP + BACK + 1))

    # Power connector
    o -= translate(
        [
            IPAD_W / 2,
            (IPAD_H + WALL * 2 + SLIP * 2) / 2
            + INNER_WALL
            + WALL_PADDING
            - POWER_UNDERHANG
            - BUTTON_D / 2,
            BACK,
        ]
    )(cube([IPAD_W, BUTTON_D + POWER_UNDERHANG, IPAD_D + SLIP + BACK + 1]))

    # Lock Button
    o -= translate(
        [
            0,
            (IPAD_H + WALL * 2 + SLIP * 2)
            - LOCK_BUTTON_TO_EDGE
            - LOCK_BUTTON_LEN
            + INNER_WALL
            + WALL_PADDING,
            BACK,
        ]
    )(
        cube(
            [
                WALL + INNER_WALL + WALL_PADDING,
                LOCK_BUTTON_LEN + 100,
                IPAD_D + SLIP + BACK,
            ]
        )
    )

    # Remove a chunk from the back to save material
    EDGE = 30
    o -= translate(
        [
            WALL + INNER_WALL + EDGE + WALL_PADDING,
            WALL + INNER_WALL + EDGE + WALL_PADDING,
            -1,
        ]
    )(cube([IPAD_W - EDGE * 2, IPAD_H - EDGE * 2, 100]))

    # If there is extra at the end, put in the required extra walls etc
    if (
        TOTAL_W - (IPAD_W + WALL * 2 + SLIP * 2 + INNER_WALL * 2 + WALL_PADDING * 2)
    ) > INNER_WALL:
        if ALLOW_IPAD_SLIDE_IN:
            # Extend the iPad edge inner wall to the top
            o += translate(
                [IPAD_W + WALL + SLIP * 2 + WALL_PADDING + INNER_WALL, IPAD_H - 15, 0]
            )(
                cube(
                    [
                        INNER_WALL,
                        15 + WALL * 2 + SLIP * 2 + WALL_PADDING + INNER_WALL - 0.5,
                        IPAD_D + BACK,
                    ]
                )
            )
        # Create inner walls to allow the iPad to get screwed in and clipped on
        IPAD_W + SLIP * 2 + INNER_WALL * 2, IPAD_H + SLIP * 2 + INNER_WALL
        o += translate(
            [
                TOTAL_W - WALL - WALL_PADDING - INNER_WALL,
                WALL + INNER_WALL + SLIP + WALL_PADDING + 15,
                BACK,
            ]
        )(cube([INNER_WALL, IPAD_H - 15 * 2, IPAD_D + SLIP]))

        # IPAD_H + WALL * 2 + SLIP * 2 + INNER_WALL + WALL_PADDING,

    o -= screws()

    if SHOW_IPAD:
        o += translate(
            [
                WALL + INNER_WALL + SLIP + WALL_PADDING,
                WALL + INNER_WALL + SLIP + WALL_PADDING,
                BACK,
            ]
        )(IPAD_STL).set_modifier("")

    return o


def main():
    fn = 200
    os.makedirs("generated", exist_ok=True)
    scad_render_to_file(
        ipadminiholderfront().set_modifier("") + ipadminiholderback(),
        filepath="generated/iPadMiniHolder-preview.scad",
        file_header=f"$fn = {fn};\n",
    )
    scad_render_to_file(
        ipadminiholderfront(),
        filepath="generated/iPad-Mini-Holder-Front.scad",
        file_header=f"$fn = {fn};\n",
    )
    scad_render_to_file(
        ipadminiholderback(),
        filepath="generated/iPad-Mini-Holder-Back.scad",
        file_header=f"$fn = {fn};\n",
    )


IPAD_CORNER = [
    [15, 15],
    [15, 0.0],
    [10.540659000000005, 0.0],
    [10.423997, 0.000881000000006793],
    [10.306894, 0.0026440000000036434],
    [10.188906000000003, 0.006168999999999869],
    [10.070919000000004, 0.010576000000000363],
    [9.952047000000007, 0.016745000000000232],
    [9.833176000000009, 0.023795000000006894],
    [9.713420999999997, 0.032607999999996196],
    [9.593665999999999, 0.04274300000000153],
    [9.473469000000009, 0.054200000000008686],
    [9.352829999999997, 0.06697800000000598],
    [9.231749000000008, 0.0815199999999976],
    [9.110668000000004, 0.09738300000000777],
    [8.988703999999998, 0.11456800000000555],
    [8.867181000000002, 0.1335160000000002],
    [8.745216, 0.15378599999999665],
    [8.622810000000001, 0.1758180000000067],
    [8.500403000000006, 0.19917300000000182],
    [8.377555000000001, 0.2238490000000013],
    [8.255148000000005, 0.2502879999999976],
    [8.1323, 0.2780479999999983],
    [8.009010000000004, 0.30801300000000253],
    [7.886161000000001, 0.3388580000000019],
    [7.763312999999997, 0.3714659999999981],
    [7.640464000000009, 0.40583600000000786],
    [7.517616000000004, 0.4419690000000003],
    [7.394767999999999, 0.47942400000000873],
    [7.271918999999997, 0.5182010000000048],
    [7.149071000000006, 0.559182000000007],
    [7.026663999999997, 0.6014839999999992],
    [6.904700000000005, 0.6455480000000051],
    [6.78229300000001, 0.6909349999999961],
    [6.660769999999999, 0.7380840000000006],
    [6.539248000000001, 0.786996000000002],
    [6.418166999999997, 0.8376710000000003],
    [6.297086000000007, 0.8896670000000029],
    [6.176889000000003, 0.9434260000000023],
    [6.056691999999998, 0.9985070000000036],
    [5.936937, 1.0557909999999993],
    [5.818065000000004, 1.1143969999999968],
    [5.699194000000006, 1.174324999999996],
    [5.581207000000006, 1.2364570000000015],
    [5.463661000000002, 1.299469000000002],
    [5.346998999999997, 1.3646850000000086],
    [5.230778999999998, 1.4312230000000028],
    [5.115001000000007, 1.4995229999999964],
    [5.000107, 1.569145000000006],
    [4.886097000000007, 1.6405299999999983],
    [4.772528000000008, 1.7136780000000016],
    [4.660285000000002, 1.788146999999995],
    [4.548484000000002, 1.863939000000002],
    [4.437567000000001, 1.9414919999999967],
    [4.327534, 2.020368000000005],
    [4.218384999999998, 2.1010069999999956],
    [4.110118999999997, 2.1825270000000074],
    [4.003179000000003, 2.2662499999999994],
    [3.896681000000001, 2.3508539999999982],
    [3.7915080000000074, 2.437221000000008],
    [3.687662000000003, 2.5249100000000055],
    [3.5846990000000005, 2.6139200000000073],
    [3.483062000000004, 2.7042530000000085],
    [3.382308000000009, 2.795907999999997],
    [3.2824389999999966, 2.8888840000000044],
    [3.1843369999999993, 2.983182999999997],
    [3.0871190000000013, 3.0788030000000077],
    [2.9912259999999975, 3.1757460000000037],
    [2.8966589999999997, 3.2735699999999994],
    [2.8034180000000077, 3.3727149999999995],
    [2.7115030000000075, 3.473182999999999],
    [2.6209130000000016, 3.5749720000000025],
    [2.5316490000000016, 3.6776430000000033],
    [2.4437110000000075, 3.781195000000004],
    [2.3570980000000077, 3.886068999999999],
    [2.2722530000000063, 3.9918249999999986],
    [2.1887339999999966, 4.0989020000000025],
    [2.106541000000007, 4.2068610000000035],
    [2.0256729999999976, 4.315701000000004],
    [1.9465730000000008, 4.4249810000000025],
    [1.8687979999999982, 4.535584],
    [1.7927910000000082, 4.647068000000004],
    [1.71811000000001, 4.759433000000001],
    [1.644754000000006, 4.872679000000005],
    [1.5736080000000072, 4.986366000000004],
    [1.5033460000000076, 5.100934000000002],
    [1.434851000000009, 5.216384000000005],
    [1.3681240000000088, 5.332274000000005],
    [1.303165000000007, 5.448605000000001],
    [1.2395309999999995, 5.565817000000003],
    [1.177222999999998, 5.68347],
    [1.1171250000000015, 5.802004000000004],
    [1.0583519999999993, 5.920539000000005],
    [1.000905000000003, 6.039954000000002],
    [0.9456670000000003, 6.15981],
    [0.8917550000000034, 6.279665999999999],
    [0.839611000000005, 6.400404000000002],
    [0.7887920000000008, 6.521141],
    [0.7397410000000093, 6.6423190000000005],
    [0.692458000000002, 6.763497000000001],
    [0.6469420000000099, 6.885116000000004],
    [0.6027520000000095, 7.007175000000004],
    [0.5603300000000075, 7.129234000000004],
    [0.5196750000000065, 7.251733999999999],
    [0.4803459999999973, 7.373794000000004],
    [0.4427840000000032, 7.496293999999999],
    [0.4065480000000008, 7.619233999999999],
    [0.3725220000000036, 7.741734000000001],
    [0.3393790000000081, 7.864234000000003],
    [0.30844600000000355, 7.9867339999999984],
    [0.27883900000000494, 8.109234],
    [0.2505570000000006, 8.231734000000003],
    [0.22404300000000887, 8.354234000000005],
    [0.1992970000000014, 8.476734],
    [0.17587600000000236, 8.598794000000005],
    [0.15378100000000927, 8.720412000000003],
    [0.1334540000000004, 8.842472],
    [0.11489400000000671, 8.963650000000001],
    [0.09721799999999803, 9.084828000000002],
    [0.08130900000000452, 9.206006000000002],
    [0.06716800000000944, 9.326743],
    [0.053910999999999376, 9.447040000000001],
    [0.04242200000000196, 9.566896],
    [0.03225799999999879, 9.686311000000003],
    [0.02342000000000155, 9.805727000000005],
    [0.01635000000000275, 9.924261000000001],
    [0.010163000000005695, 10.042795000000005],
    [0.005744000000007077, 10.160448000000002],
    [0.002209000000007677, 10.278101],
    [0.00044100000000923956, 10.394872],
    [0.0, 10.511203000000002],
    [0.0, 15],
]

IPAD_POINTS = [
    [-99.627640, 59.467351],
    [-99.593614, 59.590291],
    [-99.557378, 59.712791],
    [-99.519816, 59.835291],
    [-99.480487, 59.957351],
    [-99.439832, 60.079851],
    [-99.397410, 60.201910],
    [-99.353220, 60.323969],
    [-99.307704, 60.445588],
    [-99.260421, 60.566766],
    [-99.211370, 60.687944],
    [-99.160551, 60.809122],
    [-99.108407, 60.929419],
    [-99.054495, 61.049716],
    [-98.999257, 61.169131],
    [-98.941810, 61.288546],
    [-98.883037, 61.407081],
    [-98.822939, 61.525615],
    [-98.760631, 61.643268],
    [-98.696997, 61.760480],
    [-98.632038, 61.876811],
    [-98.565311, 61.993142],
    [-98.496816, 62.108151],
    [-98.426554, 62.222719],
    [-98.355408, 62.336406],
    [-98.282052, 62.449652],
    [-98.207371, 62.562017],
    [-98.131364, 62.673501],
    [-98.053589, 62.784104],
    [-97.974489, 62.893825],
    [-97.893621, 63.002224],
    [-97.811428, 63.110183],
    [-97.727909, 63.217260],
    [-97.643064, 63.323016],
    [-97.556451, 63.427890],
    [-97.468513, 63.531442],
    [-97.379249, 63.634113],
    [-97.288659, 63.735902],
    [-97.196744, 63.836370],
    [-97.103503, 63.935515],
    [-97.008936, 64.033339],
    [-96.913043, 64.130282],
    [-96.815825, 64.225902],
    [-96.717723, 64.320201],
    [-96.617854, 64.413177],
    [-96.517100, 64.504832],
    [-96.415463, 64.595165],
    [-96.312500, 64.684175],
    [-96.208654, 64.771864],
    [-96.103481, 64.858231],
    [-95.996983, 64.942835],
    [-95.890043, 65.026558],
    [-95.781777, 65.108519],
    [-95.672628, 65.188717],
    [-95.562595, 65.267593],
    [-95.451678, 65.345146],
    [-95.339877, 65.421378],
    [-95.227634, 65.495407],
    [-95.114065, 65.568555],
    [-95.000055, 65.639940],
    [-94.885161, 65.709562],
    [-94.769383, 65.777862],
    [-94.653163, 65.844400],
    [-94.536501, 65.909616],
    [-94.418955, 65.973069],
    [-94.300968, 66.034760],
    [-94.182097, 66.095128],
    [-94.063225, 66.153734],
    [-93.943470, 66.210578],
    [-93.823273, 66.265659],
    [-93.703076, 66.319418],
    [-93.581995, 66.371855],
    [-93.460914, 66.422089],
    [-93.339392, 66.471001],
    [-93.217869, 66.518150],
    [-93.095462, 66.563977],
    [-92.973498, 66.607601],
    [-92.851091, 66.649903],
    [-92.728243, 66.690884],
    [-92.605394, 66.729661],
    [-92.482546, 66.767556],
    [-92.359698, 66.803249],
    [-92.236849, 66.837619],
    [-92.114001, 66.870227],
    [-91.991152, 66.901513],
    [-91.867862, 66.931037],
    [-91.745014, 66.958797],
    [-91.622607, 66.985236],
    [-91.499759, 67.010353],
    [-91.377352, 67.033707],
    [-91.254946, 67.055299],
    [-91.132981, 67.075569],
    [-91.011458, 67.094517],
    [-90.889494, 67.111702],
    [-90.768413, 67.127565],
    [-90.647332, 67.142107],
    [-90.526693, 67.154885],
    [-90.406496, 67.166342],
    [-90.286741, 67.176477],
    [-90.166986, 67.185290],
    [-90.048115, 67.192781],
    [-89.929243, 67.198509],
    [-89.811256, 67.202916],
    [-89.693268, 67.206441],
    [-89.576165, 67.208204],
    [-89.459503, 67.209085],
    [89.459061, 67.209085],
    [89.575723, 67.208204],
    [89.692826, 67.206441],
    [89.810814, 67.202916],
    [89.928801, 67.198509],
    [90.047673, 67.192781],
    [90.166544, 67.185290],
    [90.286299, 67.176477],
    [90.406054, 67.166342],
    [90.526251, 67.154885],
    [90.646890, 67.142107],
    [90.767971, 67.127565],
    [90.889494, 67.111702],
    [91.011016, 67.094517],
    [91.132539, 67.075569],
    [91.254946, 67.055299],
    [91.376910, 67.033707],
    [91.499317, 67.010353],
    [91.622165, 66.985236],
    [91.745014, 66.958797],
    [91.867862, 66.931037],
    [91.990710, 66.901513],
    [92.113559, 66.870227],
    [92.236407, 66.837619],
    [92.359256, 66.803249],
    [92.482546, 66.767556],
    [92.605394, 66.729661],
    [92.727801, 66.690884],
    [92.850649, 66.649903],
    [92.973056, 66.607601],
    [93.095462, 66.563977],
    [93.217427, 66.518150],
    [93.338950, 66.471001],
    [93.460473, 66.422089],
    [93.581553, 66.371855],
    [93.702634, 66.319418],
    [93.822831, 66.265659],
    [93.943028, 66.210578],
    [94.062783, 66.153734],
    [94.181655, 66.095128],
    [94.300526, 66.034760],
    [94.418513, 65.973069],
    [94.536059, 65.909616],
    [94.652721, 65.844400],
    [94.768941, 65.777862],
    [94.884719, 65.709562],
    [94.999613, 65.639940],
    [95.113623, 65.568555],
    [95.227192, 65.495407],
    [95.339877, 65.421378],
    [95.451678, 65.345146],
    [95.562595, 65.267593],
    [95.672186, 65.188717],
    [95.781336, 65.108519],
    [95.889601, 65.026558],
    [95.996983, 64.942835],
    [96.103039, 64.858231],
    [96.208212, 64.771864],
    [96.312058, 64.684175],
    [96.415021, 64.595165],
    [96.517100, 64.504832],
    [96.617854, 64.413177],
    [96.717281, 64.320201],
    [96.815383, 64.225902],
    [96.912602, 64.130282],
    [97.008494, 64.033339],
    [97.103061, 63.935515],
    [97.196302, 63.836370],
    [97.288217, 63.735902],
    [97.378807, 63.634113],
    [97.468071, 63.531442],
    [97.556009, 63.427890],
    [97.642622, 63.323016],
    [97.727467, 63.217260],
    [97.811428, 63.110183],
    [97.893179, 63.002224],
    [97.974047, 62.893825],
    [98.053148, 62.784104],
    [98.130922, 62.673501],
    [98.206929, 62.562017],
    [98.281610, 62.449652],
    [98.354966, 62.336406],
    [98.426554, 62.222719],
    [98.496374, 62.108151],
    [98.564869, 61.993142],
    [98.631596, 61.876811],
    [98.696997, 61.760480],
    [98.760189, 61.643268],
    [98.822497, 61.525615],
    [98.882595, 61.407081],
    [98.941368, 61.288546],
    [98.998815, 61.169131],
    [99.054053, 61.049716],
    [99.107965, 60.929419],
    [99.160109, 60.809122],
    [99.210928, 60.687944],
    [99.259979, 60.566766],
    [99.307262, 60.445588],
    [99.352778, 60.323969],
    [99.396968, 60.201910],
    [99.439390, 60.079851],
    [99.480487, 59.957351],
    [99.519374, 59.835291],
    [99.556936, 59.712791],
    [99.593172, 59.590291],
    [99.627640, 59.467351],
    [99.660341, 59.344851],
    [99.691274, 59.222351],
    [99.721323, 59.099851],
    [99.749163, 58.977351],
    [99.775677, 58.854851],
    [99.800423, 58.732791],
    [99.823844, 58.610291],
    [99.845939, 58.488673],
    [99.866267, 58.367054],
    [99.885268, 58.245435],
    [99.902502, 58.124257],
    [99.918411, 58.003079],
    [99.932994, 57.882783],
    [99.945809, 57.762486],
    [99.957298, 57.642189],
    [99.967462, 57.522774],
    [99.976300, 57.403358],
    [99.983370, 57.284824],
    [99.989557, 57.166290],
    [99.993976, 57.048637],
    [99.997511, 56.930984],
    [99.999279, 56.814213],
    [100.000162, 56.697882],
    [100.000162, -56.697882],
    [99.999279, -56.814213],
    [99.997511, -56.930984],
    [99.993976, -57.048637],
    [99.989557, -57.166290],
    [99.983370, -57.284824],
    [99.976300, -57.403358],
    [99.967462, -57.522774],
    [99.957298, -57.642189],
    [99.945809, -57.762045],
    [99.932994, -57.882342],
    [99.918411, -58.003079],
    [99.902502, -58.124257],
    [99.885268, -58.245435],
    [99.866267, -58.366613],
    [99.845939, -58.488673],
    [99.823844, -58.610291],
    [99.800423, -58.732351],
    [99.775677, -58.854851],
    [99.749163, -58.977351],
    [99.721323, -59.099851],
    [99.691274, -59.222351],
    [99.660341, -59.344851],
    [99.627640, -59.467351],
    [99.593172, -59.589851],
    [99.556936, -59.712791],
    [99.519374, -59.835291],
    [99.480487, -59.957351],
    [99.439390, -60.079851],
    [99.396968, -60.201910],
    [99.352778, -60.323969],
    [99.307262, -60.445588],
    [99.259979, -60.566766],
    [99.210928, -60.687944],
    [99.160109, -60.808681],
    [99.107965, -60.929419],
    [99.054053, -61.049275],
    [98.998815, -61.169131],
    [98.941368, -61.288546],
    [98.882595, -61.407081],
    [98.822497, -61.525615],
    [98.760189, -61.643268],
    [98.696997, -61.760480],
    [98.631596, -61.876811],
    [98.564869, -61.992701],
    [98.496374, -62.108151],
    [98.426554, -62.222719],
    [98.354966, -62.336406],
    [98.281610, -62.449652],
    [98.206929, -62.562017],
    [98.130922, -62.673501],
    [98.053148, -62.784104],
    [97.974047, -62.893384],
    [97.893179, -63.002224],
    [97.811428, -63.110183],
    [97.727467, -63.217260],
    [97.642622, -63.323016],
    [97.556009, -63.427890],
    [97.468071, -63.531442],
    [97.378807, -63.634113],
    [97.288217, -63.735902],
    [97.196302, -63.836370],
    [97.103061, -63.935515],
    [97.008494, -64.033339],
    [96.912602, -64.130282],
    [96.815383, -64.225902],
    [96.717281, -64.320201],
    [96.617854, -64.413177],
    [96.517100, -64.504832],
    [96.415021, -64.595165],
    [96.312058, -64.684175],
    [96.208212, -64.771864],
    [96.103039, -64.858231],
    [95.996983, -64.942835],
    [95.889601, -65.026558],
    [95.781336, -65.108078],
    [95.672186, -65.188717],
    [95.562595, -65.267593],
    [95.451678, -65.345146],
    [95.339877, -65.420938],
    [95.227192, -65.495407],
    [95.113623, -65.568555],
    [94.999613, -65.639940],
    [94.884719, -65.709562],
    [94.768941, -65.777862],
    [94.652721, -65.844400],
    [94.536059, -65.909616],
    [94.418513, -65.972628],
    [94.300526, -66.034760],
    [94.181655, -66.094688],
    [94.062783, -66.153294],
    [93.943028, -66.210578],
    [93.822831, -66.265659],
    [93.702634, -66.319418],
    [93.581553, -66.371414],
    [93.460473, -66.422089],
    [93.338950, -66.471001],
    [93.217427, -66.518150],
    [93.095462, -66.563537],
    [92.973056, -66.607601],
    [92.850649, -66.649903],
    [92.727801, -66.690884],
    [92.605394, -66.729661],
    [92.482546, -66.767116],
    [92.359256, -66.803249],
    [92.236407, -66.837619],
    [92.113559, -66.870227],
    [91.990710, -66.901072],
    [91.867862, -66.931037],
    [91.745014, -66.958797],
    [91.622165, -66.985236],
    [91.499317, -67.009912],
    [91.376910, -67.033267],
    [91.254946, -67.055299],
    [91.132539, -67.075569],
    [91.011016, -67.094517],
    [90.889494, -67.111702],
    [90.767971, -67.127565],
    [90.646890, -67.142107],
    [90.526251, -67.154885],
    [90.406054, -67.166342],
    [90.286299, -67.176477],
    [90.166544, -67.185290],
    [90.047673, -67.192340],
    [89.928801, -67.198509],
    [89.810814, -67.202916],
    [89.692826, -67.206441],
    [89.575723, -67.208204],
    [89.459061, -67.209085],
    [-89.459503, -67.209085],
    [-89.576165, -67.208204],
    [-89.693268, -67.206441],
    [-89.811256, -67.202916],
    [-89.929243, -67.198509],
    [-90.048115, -67.192340],
    [-90.166986, -67.185290],
    [-90.286741, -67.176477],
    [-90.406496, -67.166342],
    [-90.526693, -67.154885],
    [-90.647332, -67.142107],
    [-90.768413, -67.127565],
    [-90.889494, -67.111702],
    [-91.011458, -67.094517],
    [-91.132981, -67.075569],
    [-91.254946, -67.055299],
    [-91.377352, -67.033267],
    [-91.499759, -67.009912],
    [-91.622607, -66.985236],
    [-91.745014, -66.958797],
    [-91.867862, -66.931037],
    [-91.991152, -66.901072],
    [-92.114001, -66.870227],
    [-92.236849, -66.837619],
    [-92.359698, -66.803249],
    [-92.482546, -66.767116],
    [-92.605394, -66.729661],
    [-92.728243, -66.690884],
    [-92.851091, -66.649903],
    [-92.973498, -66.607601],
    [-93.095462, -66.563537],
    [-93.217869, -66.518150],
    [-93.339392, -66.471001],
    [-93.460914, -66.422089],
    [-93.581995, -66.371414],
    [-93.703076, -66.319418],
    [-93.823273, -66.265659],
    [-93.943470, -66.210578],
    [-94.063225, -66.153294],
    [-94.182097, -66.094688],
    [-94.300968, -66.034760],
    [-94.418955, -65.972628],
    [-94.536501, -65.909616],
    [-94.653163, -65.844400],
    [-94.769383, -65.777862],
    [-94.885161, -65.709562],
    [-95.000055, -65.639940],
    [-95.114065, -65.568555],
    [-95.227634, -65.495407],
    [-95.339877, -65.420938],
    [-95.451678, -65.345146],
    [-95.562595, -65.267593],
    [-95.672628, -65.188717],
    [-95.781777, -65.108078],
    [-95.890043, -65.026558],
    [-95.996983, -64.942835],
    [-96.103481, -64.858231],
    [-96.208654, -64.771864],
    [-96.312500, -64.684175],
    [-96.415463, -64.595165],
    [-96.517100, -64.504832],
    [-96.617854, -64.413177],
    [-96.717723, -64.320201],
    [-96.815825, -64.225902],
    [-96.913043, -64.130282],
    [-97.008936, -64.033339],
    [-97.103503, -63.935515],
    [-97.196744, -63.836370],
    [-97.288659, -63.735902],
    [-97.379249, -63.634113],
    [-97.468513, -63.531442],
    [-97.556451, -63.427890],
    [-97.643064, -63.323016],
    [-97.727909, -63.217260],
    [-97.811428, -63.110183],
    [-97.893621, -63.002224],
    [-97.974489, -62.893384],
    [-98.053589, -62.784104],
    [-98.131364, -62.673501],
    [-98.207371, -62.562017],
    [-98.282052, -62.449652],
    [-98.355408, -62.336406],
    [-98.426554, -62.222719],
    [-98.496816, -62.108151],
    [-98.565311, -61.992701],
    [-98.632038, -61.876811],
    [-98.696997, -61.760480],
    [-98.760631, -61.643268],
    [-98.822939, -61.525615],
    [-98.883037, -61.407081],
    [-98.941810, -61.288546],
    [-98.999257, -61.169131],
    [-99.054495, -61.049275],
    [-99.108407, -60.929419],
    [-99.160551, -60.808681],
    [-99.211370, -60.687944],
    [-99.260421, -60.566766],
    [-99.307704, -60.445588],
    [-99.353220, -60.323969],
    [-99.397410, -60.201910],
    [-99.439832, -60.079851],
    [-99.480487, -59.957351],
    [-99.519816, -59.835291],
    [-99.557378, -59.712791],
    [-99.593614, -59.589851],
    [-99.627640, -59.467351],
    [-99.660783, -59.344851],
    [-99.691716, -59.222351],
    [-99.721323, -59.099851],
    [-99.749605, -58.977351],
    [-99.776119, -58.854851],
    [-99.800865, -58.732351],
    [-99.824286, -58.610291],
    [-99.846381, -58.488673],
    [-99.866708, -58.366613],
    [-99.885268, -58.245435],
    [-99.902944, -58.124257],
    [-99.918853, -58.003079],
    [-99.932994, -57.882342],
    [-99.946251, -57.762045],
    [-99.957740, -57.642189],
    [-99.967904, -57.522774],
    [-99.976742, -57.403358],
    [-99.983812, -57.284824],
    [-99.989999, -57.166290],
    [-99.994418, -57.048637],
    [-99.997953, -56.930984],
    [-99.999721, -56.814213],
    [-100.000162, -56.697882],
    [-100.000162, 56.697882],
    [-99.999721, 56.814213],
    [-99.997953, 56.930984],
    [-99.994418, 57.048637],
    [-99.989999, 57.166290],
    [-99.983812, 57.284824],
    [-99.976742, 57.403358],
    [-99.967904, 57.522774],
    [-99.957740, 57.642189],
    [-99.946251, 57.762486],
    [-99.932994, 57.882783],
    [-99.918853, 58.003079],
    [-99.902944, 58.124257],
    [-99.885268, 58.245435],
    [-99.866708, 58.367054],
    [-99.846381, 58.488673],
    [-99.824286, 58.610291],
    [-99.800865, 58.732791],
    [-99.776119, 58.854851],
    [-99.749605, 58.977351],
    [-99.721323, 59.099851],
    [-99.691716, 59.222351],
    [-99.660783, 59.344851],
    [-99.627640, 59.467351],
]

IPAD_SIDE_POINTS = [
    [-4.288174, -98.658306],
    [-4.288174, 98.660074],
    [-4.271334, 98.721940],
    [-4.254494, 98.782040],
    [-4.237128, 98.839930],
    [-4.219235, 98.896052],
    [-4.201342, 98.950406],
    [-4.182924, 99.002993],
    [-4.164505, 99.053812],
    [-4.145560, 99.102864],
    [-4.126088, 99.150148],
    [-4.106617, 99.195664],
    [-4.086619, 99.239413],
    [-4.066622, 99.281836],
    [-4.046098, 99.322492],
    [-4.025574, 99.361821],
    [-4.004524, 99.399383],
    [-3.983474, 99.435620],
    [-3.961897, 99.470088],
    [-3.940321, 99.503231],
    [-3.918218, 99.535049],
    [-3.896116, 99.565540],
    [-3.873487, 99.594706],
    [-3.850858, 99.622546],
    [-3.828229, 99.649061],
    [-3.805074, 99.674249],
    [-3.781919, 99.698112],
    [-3.758763, 99.721091],
    [-3.723505, 99.752909],
    [-3.687719, 99.782516],
    [-3.651408, 99.809473],
    [-3.615096, 99.834219],
    [-3.578259, 99.856757],
    [-3.541421, 99.877084],
    [-3.504057, 99.895644],
    [-3.466693, 99.911995],
    [-3.428803, 99.926578],
    [-3.390912, 99.939393],
    [-3.353022, 99.950883],
    [-3.314606, 99.960605],
    [-3.276189, 99.969001],
    [-3.237773, 99.976071],
    [-3.199356, 99.982258],
    [-3.160940, 99.987119],
    [-3.122523, 99.991096],
    [-3.084107, 99.994190],
    [-3.032534, 99.997283],
    [-2.980961, 99.999051],
    [-2.904128, 100.000376],
    [-2.702047, 100.000376],
    [-2.651527, 99.999934],
    [-2.601006, 99.999051],
    [-2.549960, 99.997725],
    [-2.497861, 99.995957],
    [-2.444709, 99.993306],
    [-2.417870, 99.991538],
    [-2.390505, 99.989771],
    [-2.363140, 99.987561],
    [-2.335249, 99.985351],
    [-2.306831, 99.982700],
    [-2.277887, 99.979607],
    [-2.248417, 99.976513],
    [-2.218420, 99.972978],
    [-2.187898, 99.969001],
    [-2.156849, 99.964582],
    [-2.125274, 99.959721],
    [-2.093172, 99.954860],
    [-2.060544, 99.949557],
    [-2.027390, 99.943812],
    [-1.993184, 99.937626],
    [-1.958451, 99.930997],
    [-1.922666, 99.923926],
    [-1.886355, 99.916414],
    [-1.848991, 99.908018],
    [-1.811100, 99.899180],
    [-1.772158, 99.889900],
    [-1.732162, 99.880178],
    [-1.691641, 99.870014],
    [-1.650067, 99.858966],
    [-1.563761, 99.835103],
    [-1.473772, 99.809031],
    [-1.379047, 99.780307],
    [-1.280111, 99.748931],
    [-1.176439, 99.714463],
    [-1.067505, 99.676901],
    [-0.953308, 99.636245],
    [-0.833848, 99.592496],
    [-0.708600, 99.545212],
    [-0.577563, 99.494393],
    [-0.440211, 99.440039],
    [-0.146562, 99.320282],
    [0.010262, 99.254438],
    [0.173400, 99.184175],
    [0.341801, 99.108609],
    [0.427581, 99.068837],
    [0.514413, 99.027740],
    [0.602297, 98.984875],
    [0.691234, 98.940242],
    [0.780697, 98.894284],
    [0.871212, 98.846558],
    [0.962254, 98.797065],
    [1.053822, 98.745361],
    [1.145916, 98.691891],
    [1.238011, 98.636652],
    [1.330631, 98.579205],
    [1.423252, 98.519547],
    [1.469562, 98.489056],
    [1.515872, 98.457680],
    [1.562183, 98.425863],
    [1.608493, 98.393604],
    [1.654803, 98.360461],
    [1.701113, 98.326876],
    [1.747424, 98.292849],
    [1.793734, 98.257938],
    [1.840044, 98.222586],
    [1.885828, 98.186792],
    [1.931612, 98.150113],
    [1.977396, 98.112993],
    [2.023180, 98.074989],
    [2.068964, 98.036543],
    [2.114222, 97.997214],
    [2.159480, 97.957442],
    [2.204738, 97.916787],
    [2.249469, 97.875247],
    [2.294201, 97.833266],
    [2.338932, 97.790401],
    [2.383138, 97.747094],
    [2.427343, 97.702904],
    [2.471022, 97.657829],
    [2.514701, 97.612313],
    [2.557854, 97.565913],
    [2.601006, 97.518629],
    [2.643633, 97.470461],
    [2.686259, 97.421851],
    [2.728360, 97.372358],
    [2.770460, 97.321980],
    [2.812034, 97.270719],
    [2.853082, 97.219016],
    [2.894129, 97.166429],
    [2.934651, 97.112958],
    [2.974646, 97.058604],
    [3.014641, 97.003366],
    [3.054110, 96.947243],
    [3.093053, 96.890237],
    [3.131470, 96.832348],
    [3.169886, 96.773574],
    [3.207776, 96.713917],
    [3.245140, 96.653376],
    [3.281978, 96.591951],
    [3.318290, 96.529642],
    [3.354075, 96.466449],
    [3.389334, 96.402373],
    [3.424066, 96.337412],
    [3.458273, 96.271568],
    [3.491953, 96.204398],
    [3.525107, 96.136345],
    [3.557735, 96.067407],
    [3.589836, 95.997586],
    [3.621411, 95.926439],
    [3.652460, 95.854408],
    [3.682983, 95.781494],
    [3.712979, 95.707695],
    [3.742450, 95.632571],
    [3.770867, 95.556563],
    [3.798759, 95.479672],
    [3.826124, 95.401454],
    [3.852963, 95.322353],
    [3.878749, 95.241926],
    [3.904009, 95.160615],
    [3.928743, 95.078420],
    [3.952425, 94.994900],
    [3.975580, 94.910496],
    [3.998209, 94.824766],
    [4.019785, 94.738152],
    [4.040835, 94.650213],
    [4.060833, 94.561390],
    [4.080304, 94.471241],
    [4.098723, 94.379766],
    [4.116616, 94.287407],
    [4.133456, 94.193723],
    [4.149770, 94.098713],
    [4.165031, 94.002820],
    [4.193449, 93.807055],
    [4.218183, 93.606871],
    [4.239233, 93.401385],
    [4.256599, 93.191037],
    [4.270282, 92.975829],
    [4.280280, 92.755317],
    [4.286069, 92.529945],
    [4.288174, 92.299270],
    [4.288174, 0.000884],
    [4.288174, -92.297060],
    [4.286069, -92.527735],
    [4.280280, -92.753108],
    [4.270282, -92.973619],
    [4.256599, -93.188828],
    [4.239233, -93.399175],
    [4.218183, -93.604662],
    [4.193449, -93.804845],
    [4.165031, -94.000610],
    [4.149770, -94.096504],
    [4.133456, -94.191514],
    [4.116616, -94.285198],
    [4.098723, -94.377556],
    [4.080304, -94.469031],
    [4.060833, -94.559180],
    [4.040835, -94.648003],
    [4.019785, -94.735943],
    [3.998209, -94.822556],
    [3.975580, -94.908286],
    [3.952425, -94.992690],
    [3.928743, -95.076211],
    [3.904009, -95.158405],
    [3.878749, -95.239716],
    [3.852963, -95.320143],
    [3.826124, -95.399245],
    [3.798759, -95.477462],
    [3.770867, -95.554354],
    [3.742450, -95.630362],
    [3.712979, -95.705486],
    [3.682983, -95.779284],
    [3.652460, -95.852199],
    [3.621411, -95.924230],
    [3.589836, -95.995377],
    [3.557735, -96.065198],
    [3.525107, -96.134135],
    [3.491953, -96.202189],
    [3.458273, -96.269359],
    [3.424066, -96.335645],
    [3.389334, -96.400605],
    [3.354075, -96.464681],
    [3.318290, -96.527874],
    [3.281978, -96.590183],
    [3.245140, -96.651608],
    [3.207776, -96.712149],
    [3.169886, -96.771807],
    [3.131470, -96.830580],
    [3.093053, -96.888470],
    [3.054110, -96.945476],
    [3.014641, -97.001598],
    [2.974646, -97.056836],
    [2.934651, -97.111191],
    [2.894129, -97.164661],
    [2.853082, -97.217248],
    [2.812034, -97.269393],
    [2.770460, -97.320655],
    [2.728360, -97.371032],
    [2.686259, -97.420525],
    [2.643633, -97.469135],
    [2.601006, -97.517303],
    [2.557854, -97.564587],
    [2.514701, -97.610987],
    [2.471022, -97.656504],
    [2.427343, -97.701578],
    [2.383138, -97.745769],
    [2.338932, -97.789076],
    [2.294201, -97.831940],
    [2.249469, -97.873922],
    [2.204738, -97.915461],
    [2.159480, -97.956116],
    [2.114222, -97.995888],
    [2.068964, -98.035218],
    [2.023180, -98.073663],
    [1.977396, -98.111667],
    [1.931612, -98.148788],
    [1.885828, -98.185466],
    [1.840044, -98.221260],
    [1.793734, -98.256613],
    [1.747424, -98.291523],
    [1.701113, -98.325550],
    [1.654803, -98.359135],
    [1.608493, -98.392278],
    [1.562183, -98.424537],
    [1.515872, -98.456355],
    [1.469562, -98.487730],
    [1.423252, -98.518221],
    [1.330631, -98.577879],
    [1.238011, -98.635327],
    [1.145916, -98.691007],
    [1.053822, -98.744478],
    [0.962254, -98.796181],
    [0.871212, -98.845674],
    [0.780697, -98.893400],
    [0.691234, -98.939359],
    [0.602297, -98.983991],
    [0.514413, -99.026856],
    [0.427581, -99.067953],
    [0.341801, -99.107725],
    [0.173400, -99.183291],
    [0.010262, -99.253554],
    [-0.146562, -99.319398],
    [-0.440211, -99.439155],
    [-0.577563, -99.493509],
    [-0.708600, -99.544329],
    [-0.833848, -99.591613],
    [-0.953308, -99.635361],
    [-1.067505, -99.676017],
    [-1.176439, -99.713579],
    [-1.280111, -99.748048],
    [-1.379047, -99.779423],
    [-1.473772, -99.808147],
    [-1.563761, -99.834219],
    [-1.650067, -99.858082],
    [-1.691641, -99.869130],
    [-1.732162, -99.879736],
    [-1.772158, -99.889458],
    [-1.811100, -99.898738],
    [-1.848991, -99.907576],
    [-1.886355, -99.915972],
    [-1.922666, -99.923926],
    [-1.958451, -99.930997],
    [-1.993184, -99.937626],
    [-2.027390, -99.943812],
    [-2.060544, -99.949557],
    [-2.093172, -99.954860],
    [-2.125274, -99.959721],
    [-2.156849, -99.964582],
    [-2.187898, -99.969001],
    [-2.218420, -99.972978],
    [-2.248417, -99.976513],
    [-2.277887, -99.979607],
    [-2.306831, -99.982700],
    [-2.335249, -99.985351],
    [-2.363140, -99.987561],
    [-2.390505, -99.989771],
    [-2.417870, -99.991538],
    [-2.444709, -99.993306],
    [-2.497861, -99.995957],
    [-2.549960, -99.997725],
    [-2.601006, -99.999051],
    [-2.651527, -99.999934],
    [-2.802035, -100.000376],
    [-2.903602, -99.999934],
    [-2.954649, -99.999051],
    [-3.005695, -99.997725],
    [-3.057268, -99.995073],
    [-3.108841, -99.991538],
    [-3.147257, -99.988003],
    [-3.185674, -99.983142],
    [-3.224090, -99.977397],
    [-3.262507, -99.970327],
    [-3.300923, -99.962372],
    [-3.339340, -99.953092],
    [-3.377756, -99.942045],
    [-3.415646, -99.929671],
    [-3.453537, -99.915530],
    [-3.490901, -99.899622],
    [-3.528265, -99.881945],
    [-3.565102, -99.862060],
    [-3.601940, -99.840406],
    [-3.638251, -99.816543],
    [-3.674563, -99.790471],
    [-3.710348, -99.761747],
    [-3.745607, -99.730813],
    [-3.769289, -99.708718],
    [-3.792444, -99.685297],
    [-3.815599, -99.660550],
    [-3.838228, -99.634920],
    [-3.860857, -99.607963],
    [-3.883485, -99.579681],
    [-3.905588, -99.550073],
    [-3.927691, -99.519140],
    [-3.949267, -99.486439],
    [-3.970844, -99.452412],
    [-3.992420, -99.417060],
    [-4.013470, -99.380381],
    [-4.034520, -99.341935],
    [-4.055044, -99.302164],
    [-4.075568, -99.260625],
    [-4.105564, -99.195222],
    [-4.125036, -99.149706],
    [-4.144507, -99.102422],
    [-4.163452, -99.053370],
    [-4.181871, -99.002551],
    [-4.200290, -98.949964],
    [-4.218183, -98.895610],
    [-4.236075, -98.839488],
    [-4.253441, -98.781598],
    [-4.270282, -98.721499],
    [-4.288174, -98.658306],
]
if __name__ == "__main__":
    main()
